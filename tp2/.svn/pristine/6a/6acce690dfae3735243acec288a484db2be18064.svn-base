\documentclass[a4paper]{article}
\usepackage[spanish]{babel}
\usepackage[utf8]{inputenc}
\usepackage{charter}   % tipografia
\usepackage{graphicx}
%\usepackage{makeidx}

%\usepackage{float}
%\usepackage{amsmath, amsthm, amssymb}
%\usepackage{amsfonts}
%\usepackage{sectsty}
%\usepackage{charter}
%\usepackage{wrapfig}
%\usepackage{listings}
%\lstset{language=C}


\input{codesnippet}
\input{page.layout}
% \setcounter{secnumdepth}{2}
\usepackage{underscore}
\usepackage{caratula}
\usepackage{url}
\usepackage{float}

% ******************************************************** %
%              TEMPLATE DE INFORME ORGA2 v0.1              %
% ******************************************************** %
% ******************************************************** %
%                                                          %
% ALGUNOS PAQUETES REQUERIDOS (EN UBUNTU):                 %
% ========================================
%                                                          %
% texlive-latex-base                                       %
% texlive-latex-recommended                                %
% texlive-fonts-recommended                                %
% texlive-latex-extra?                                     %
% texlive-lang-spanish (en ubuntu 13.10)                   %
% ******************************************************** %

\begin{document}


\thispagestyle{empty}
\materia{Organización del Computador II}
\submateria{Primer Cuatrimestre de 2015}
\titulo{Trabajo Práctico II}
\subtitulo{Modelo SIMD}
\grupo{Grupo Crash Bash/Ps1}
\integrante{Ituarte, Joaquin}{457/13}{joaquinituarte@gmail.com} % obligatorio 
\integrante{Maddonni, Axel}{200 /14}{axel.maddonni@gmail.com} % obligatorio 
\integrante{Oller, Luca}{667/13}{ollerrr@live.com} % obligatorio 

\maketitle
\newpage

\thispagestyle{empty}
\vfill

\thispagestyle{empty}
\vspace{3cm}
\tableofcontents
\newpage

%\normalsize
\newpage

\section{Introducción}

En este trabajo se presentan y comparan tres implementaciones, dos en Assembler hechas por nosotros y una en C hechas por la cátedra,  sobre la realización de tres filtros de imágenes. Estos filtros son el filtro Blur, el filtro Merge y el filtro HSL.

La presentación de las implementaciones mencionadas anteriormente consiste en exponer y explicar el funcionamiento de cada una de ellas de forma individual. La comparación de funciones consiste en analizar las ventajas y desventajas que tiene una implementación sobre las otras, exponiendo en que caso es conveniente utilizar una u otra dependiendo del contexto de uso.

Al finalizar las explicaciones, se detallarán además las conclusiones obtenidas y las problemáticas que se nos presentaron  en la realización del trabajo práctico.

\newpage

\section{Desarrollo} 

\subsection{Blur}

\input{blur}

\newpage

\subsection{Merge}

\input{merge}

\newpage

\subsection{HSL}

\input{hsl}

\newpage

\section{Resultados}

\input{resultados}

\newpage

\section{Conclusiones}

//Esto esta copiado de otro tp viejo, no lo lei

\paragraph{} Vimos que el conjunto de instrucciones de SSE puede utilizarse para la paralelización de cómputos y el acceso a memoria de a bloques de 
datos contiguos. Observamos que en los casos que se logró procesar más de un dato a la vez el rendimiento del algoritmo fue mayor.

\paragraph{} Una de las cosas que nos sorprendió fue el hecho de que en los algoritmos PopArt y Temperature las optimizaciones del GCC funcionaron mejor
que la implementación de ASM.

\paragraph{} Además, observamos que el código de assembler generado por el compilador GCC, sin optimización, produce una gran cantidad de accesos a memoria
al utilizar variables locales en la pila lo cual produce una penalización en el rendimiento del proceso. Otra de las cosas que realiza el código en C
es la utilización de las funciones idiv e imul dentro del ciclo lo cual también disminuye la performance del proceso.

\end{document}

